/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    id "com.heroku.sdk.heroku-gradle" version "1.0.4"
}

repositories {
    mavenCentral()
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:33.0.0-jre'

    // Javalin is a server/networking library for Java.
    implementation 'io.javalin:javalin:5.6.1'
    implementation 'io.javalin:javalin-bundle:5.6.1'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'org.json:json:20240303'
    implementation 'com.j2html:j2html:1.4.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

    // PostgresSQL driver
    implementation 'org.postgresql:postgresql:42.7.1'
    
    // Apache Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

tasks.named('jar') {
  exclude 'META-INF/MANIFEST.MF'
  // Remove signing information because the conflicts caused by adding libraries
  // to the same path will cause java to throw a java.lang.SecurityException.
  exclude 'META-INF/*.SF'
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  duplicatesStrategy = DuplicatesStrategy.WARN
  from {
      configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes(
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
      'Main-Class': 'server.SecretHitlerServer',
      'Implementation-Title': 'secret-hitler-online'
    )
  }
}

javadoc {
    options.tags = ["requires:a:Requires:", "modifies:a:Modifies:", "effects:a:Effects:"]
}

// Define the main class for the application
mainClassName = 'server.SecretHitlerServer'

task stage(dependsOn: ['build', 'clean', 'jar'])
build.mustRunAfter clean
